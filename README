How to get risealumni up and running

START BY MAKING SURE your ruby gems are version 1.3.4 or greater:
* (sudo) gem update --system
Then add the github repo to your gems:
* gem sources -a http://gems.github.com


    * risealmuni runs on Ruby on Rails, so first you need to get rails running. Go download rails (http://rubyonrails.org/down) and follow it's instructions to get rails running.
    * The directions in this README file assume some knowledge of rails, but I'll go through it a bit here first.
    * The first thing to do is install the ruby gems that are required. For each gem listed in the README, at the command line, do something like "gem install [gem name]" or "sudo gem install [gem name]".
    * The next thing to do is set up your database (steps 1-4 in the README). risealumni is setup to use MySQL by default, so just follow the instructions in the README and configure the files for your computer.
    * Skip step 5.
    * Now setup global variable (site name and url and stuff) (steps 6-13) and change the (r)html and css to suit your taste.
    * In dev mode, search (steps 14-16) should work right out of the box (assuming you install the gems). The search instructions are really for a production environment.
    * Start risealumni with the typical "./script/server" and point your browser to "http://localhost:3000".




Instructions:

Quick Setup (currently for non-Windows users only - due to ferret gem issues):

  1. Edit config/database.yml.tmp to reflect the database names you would like to use.
  2. Edit config/environments/production.rb so asset_host reflects the name of the production asset server
  3. cp config/database.yml.tmp config/database.yml
  4. MAKE SURE YOU UPGRADE TO GEMS 1.3.4.
  5. RUN gem sources -a http://gems.github.com
  7. rake test
  8. See step #6 below to continue setup (near "Setup default values")

The getting_started rake task will install all required gems, create the databases in database.yml, 
and migrate the development and test databases.

Manual Setup:

Install the Required Gems:

1. Install these gems:
- youtube-g
- uuidtools
- ferret
- avatar
- icalendar
- will_paginate
- ar_mailer
- mime-types
- json
- twitter4r
- fiveruns-memcache-client
- facebooker
- rflickr
- RedCloth
- rmagick (will require ImageMagick, which is not a gem)
- win32console (windows only)
2. Run "rake gems:build" to build the gems that need building


TIPS:
Installing ImageMagick and RMagick
See these posts for tips:
http://b.lesseverything.com/2007/9/26/installing-imagemagick-and-rmagick-on-mac-os-x
http://www.randycullom.com/chatterbox/archives/2006/12/installing_imag.html

Setup the databases:

1. Edit config/database.yml.tmp to reflect the database names you would like to use.
2. cp config/database.yml.tmp config/database.yml
3. rake db:create:all
4. rake mig a=no

All tests pass:

5. rake

Setup default values:

6. Edit config/initializers/exception_notifier.rb
7. Edit the config/environment.rb file and change the config.action_controller.session data
8. Edit config/environments/development.rb and production.rb to suit your tastes. (Specifically config.action_mailer.delivery_method)
9. Change the values in config/initializers/global_variables.rb to match your site and domain. (Specifically SITE_NAME, SITE, MAILER_TO_ADDRESS, MAILER_FROM_ADDRESS, REGISTRATION_RECIPIENTS)
10. Go to the section "About flickr integration" and follow the steps to either use flickr or not.

11. Edit public/404.html, public/500.html, app/views/account_mailer/*
12. Edit application.css to suite your tastes.
13. Edit app/views/home/terms.

About flickr integration

If you WANT to have flickr integration in your application, follow these setup instructions:
1. Go http://flickr.com/services/api/keys/apply/ to apply for a flickr api key.
2. Copy the Key and Secret into config/initializers/flickr.rb
3. From the command line, run "ruby script/authorize_flickr.rb" and follow the instructions.
  This stores the flickr auth stuff into config/flickr.cache. If you add this cache file to your source control, then you shouldn't have to repeat this in production. Alternatively, you can get a different key for production, if you'd like.

If you DO NOT WANT to have flickr integration in your application, follow these setup instructions:
1. Delete line 15 from app/controllers/profiles_controller.rb [@flickr = @profile.flickr_username.blank? ? [] : flickr_images(flickr.people.findByUsername(@profile.flickr_username))]
2. Delete lines 22-35 in app/views/profiles/_public.html.erb


Facebook Configuration
----------------------

0. Get a publicly available host:
  * dyndns.org
  * static IP

1. Add the Developer Application.

2. Create a New Application.

3. Update the Facebook Application settings to point to your publicly available host.

4. Edit the facebooker.yml file to reflect your Facebook Application settings page.

5. Register the Facebook Post Templates.













